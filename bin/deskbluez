#!/usr/bin/env node

const homedir = require("os").homedir();
const path = require("path");
const prompts = require('prompts');
const mqtt = require('mqtt')
const { program } = require('commander');

const store = require("data-store")({ path: path.join(homedir, ".config", "deskbluez") });

const Bluetooth = require("../lib/bluetooth");
const Desk = require("../lib/desk");


program.version("0.0.1");


const connect = async () => {

    const bluetooth = new Bluetooth();
    await bluetooth.init();

    const devices = await bluetooth.discoverDevices();

    const { device = null } = await prompts([
        {
            type: "select",
            name: "device",
            message: "Choose device",
            choices: devices.map(device => {
                return {
                    title: `${device.props.Name} [${device.address}]`,
                    value: device
                }
            })
        }
    ]);


    if (!device) {
        console.error("No device selected!");
        process.exit(1);
    }

    const deskDevice = await bluetooth.connect(device.address);
    const desk = new Desk(deskDevice);
    await desk.connect();

    store.set("connectedDevice", device.address);
    console.log("Device connected successfully.");

    process.exit(0);
};

const move = async (data) => {

    const bluetooth = new Bluetooth();
    await bluetooth.init();

    await bluetooth.discoverDevices();

    const address = store.get("connectedDevice");

    if (!address) {
        throw new Error("No connected device found!");
    }

    const device = await bluetooth.connect(address);
    const desk = new Desk(device);
    await desk.connect();

    if (data.to) {
        const positionToMove = parseInt(data.to);
        await desk.moveTo(positionToMove);
    } else if (data.up) {
        await desk.up();
    } else {
        await desk.down();
    }

    await desk.disconnect();

    process.exit(0);
}

const serve = async (endpoint, publishTopic, subscribeTopic, data) => {

    const { username = undefined, password = undefined } = data;

    const bluetooth = new Bluetooth();
    await bluetooth.init();

    await bluetooth.discoverDevices();

    const address = store.get("connectedDevice");

    if (!address) {
        throw new Error("No connected device found!");
    }

    const device = await bluetooth.connect(address);
    const desk = new Desk(device);

    await desk.connect();

    const client = mqtt.connect(endpoint, {
        username: username,
        password: password,
    });

    client.on("connect", function () {
        console.log("Connected to the MQTT Broker");

        let lastP = 0;

        desk.startPositionListening((position) => {

            const diff = Date.now() - lastP;
            if (diff > 100) {
                lastP = Date.now();
                client.publish(publishTopic, JSON.stringify(position));
            }
        });

        setInterval(async () => {
            try {
                await desk.getCurrentPosition();
            } catch (err) {
                console.error("Position beat failed:", err.message);
                process.exit(1);
            }
        }, 5000);

        client.subscribe(subscribeTopic, {}, (err) => {
            if (err) {
                console.error(err);
                process.exit(1);
            }
        });

        client.on("message", (topic, data) => {
            if (topic !== subscribeTopic) return;
            const [command, position = null] = data.toString().split(":");

            if (command === "up") {
                desk.up();
            } else if (command === "down") {
                desk.down();
            } else if (command === "to" && position) {
                desk.cancelCurrentMove().then(() => desk.moveTo(parseInt(position)));
            }
        });
    });
}

const position = async () => {
    const bluetooth = new Bluetooth();
    await bluetooth.init();

    await bluetooth.discoverDevices();

    const address = store.get("connectedDevice");

    if (!address) {
        throw new Error("No connected device found!");
    }

    const device = await bluetooth.connect(address);
    const desk = new Desk(device);
    await desk.connect();

    const position = await desk.getCurrentPosition();
    console.log(position);
    await desk.disconnect();
    process.exit();
}

const errorHandler = (action) => {
    return (...args) => {
        return action(...args).catch(err => {
            console.error(err);
            process.exit(1);
        })
    };
}

program
    .command("connect")
    .action(errorHandler(connect))

program
    .command("serve <endpoint> <publishTopic> <subscribeTopic>")
    .option("--password [password]")
    .option("--username [username]")
    .action(errorHandler(serve));

program
    .command("move")
    .option("--up")
    .option("--down")
    .option("--to [position]")
    .action(errorHandler(move));

program
    .command("position")
    .action(errorHandler(position));

program.parse(process.argv);